// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/challenge/payment-processor/internal/app"
	"github.com/challenge/payment-processor/internal/pkg/commom/config"
	"github.com/challenge/payment-processor/internal/pkg/commom/logging"
	"github.com/challenge/payment-processor/internal/pkg/webserver"
)

// Injectors from wire.go:

func initializeConfig(path string) (config.Configuration, error) {
	configuration, err := config.NewConfig(path)
	if err != nil {
		return config.Configuration{}, err
	}
	return configuration, nil
}

func initializeAppender(path string) (logging.FileAppender, error) {
	configuration, err := config.NewConfig(path)
	if err != nil {
		return logging.FileAppender{}, err
	}
	fileAppender := logging.NewFileAppender(configuration)
	return fileAppender, nil
}

func initializeApp(path string) (*app.PaymentProcessorApp, error) {
	configuration, err := config.NewConfig(path)
	if err != nil {
		return nil, err
	}
	loggingLevels := config.NewLoggingLevels(configuration)
	loggerWebServer := logging.NewWebServer(loggingLevels)
	paramWebServer := webserver.NewParamWebServer(configuration, loggerWebServer)
	webServer := webserver.NewWebServer(paramWebServer)
	logger := logging.NewLogger(loggingLevels)
	paymentProcessorApp := app.NewPaymentProcessorApp(webServer, logger)
	return paymentProcessorApp, nil
}
