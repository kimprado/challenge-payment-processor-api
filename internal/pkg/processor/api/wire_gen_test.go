// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package api

import (
	"github.com/challenge/payment-processor/internal/pkg/commom/config"
	"github.com/challenge/payment-processor/internal/pkg/commom/logging"
	"github.com/challenge/payment-processor/internal/pkg/infra/http"
	"github.com/challenge/payment-processor/internal/pkg/infra/redis"
	"github.com/challenge/payment-processor/internal/pkg/processor"
)

// Injectors from wire.go:

func initializeConfigTest() (config.Configuration, error) {
	string2 := newIntegrationConfigFile()
	configuration, err := config.NewConfig(string2)
	if err != nil {
		return config.Configuration{}, err
	}
	return configuration, nil
}

func initializeRedisTest(config2 config.Configuration) (redis.DBConnection, error) {
	redisDB := config.NewRedisDB(config2)
	loggingLevels := config.NewLoggingLevels(config2)
	loggerRedisDB := logging.NewRedisDB(loggingLevels)
	dbConnection, err := redis.NewDBConnection(redisDB, loggerRedisDB)
	if err != nil {
		return nil, err
	}
	return dbConnection, nil
}

func initializeControllerWithDependenciesTest(config2 config.Configuration) (*startWorkers, error) {
	actorsMap := processor.NewActorsMap()
	acquirerActors := processor.NewAcquirerActors(actorsMap)
	loggingLevels := config.NewLoggingLevels(config2)
	loggerProcessor := logging.NewLoggerProcessor(loggingLevels)
	paymentProcessorService := processor.NewPaymentProcessorService(acquirerActors, loggerProcessor)
	loggerAPI := logging.NewLoggerAPI(loggingLevels)
	controller := NewController(paymentProcessorService, loggerAPI)
	redisDB := config.NewRedisDB(config2)
	loggerRedisDB := logging.NewRedisDB(loggingLevels)
	dbConnection, err := redis.NewDBConnection(redisDB, loggerRedisDB)
	if err != nil {
		return nil, err
	}
	loggerCardRepository := logging.NewLoggerCardRepository(loggingLevels)
	cardRepositoryRedis := processor.NewCardRepositoryRedis(dbConnection, redisDB, config2, loggerCardRepository)
	loggerHTTP := logging.NewLoggerHTTP(loggingLevels)
	service := http.NewHTTPService(loggerHTTP)
	acquirerParameter := processor.NewAcquirerParameter(cardRepositoryRedis, service)
	stoneAcquirerWorkers := processor.NewStoneAcquirerWorkers(acquirerActors, acquirerParameter, config2)
	cieloAcquirerWorkers := processor.NewCieloAcquirerWorkers(acquirerActors, acquirerParameter, config2)
	apiStartWorkers := newStartWorkers(controller, stoneAcquirerWorkers, cieloAcquirerWorkers)
	return apiStartWorkers, nil
}
